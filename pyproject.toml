[tool.poetry]
# Charm is not packed as a standard Python package; this information is not used
name = "charm"
version = "0.1.0"
description = ""
authors = []

[tool.poetry.dependencies]
python = "^3.10"
ops = "^2.12.0"
tenacity = "^8.2.3"
jinja2 = "^3.1.3"
overrides = "7.7.0"
requests = "2.31.0"
shortuuid = "1.0.13"
pydantic = "^1.10, <2"
cryptography = "^42.0.5"
jsonschema = "^4.21.1"


[tool.poetry.group.charm-libs.dependencies]
# data_platform_libs/v0/data_interfaces.py
ops = ">=2.0.0"
# data_platform_libs/v0/upgrade.py
# grafana_agent/v0/cos_agent.py requires pydantic <2
pydantic = "^1.10, <2"
# tls_certificates_interface/v1/tls_certificates.py
cryptography = "^42.0.5"
jsonschema = "^4.21.1"
# grafana_agent/v0/cos_agent.py
cosl = ">=0.0.7"
bcrypt = ">=4.0.1"

[tool.poetry.group.format]
optional = true

[tool.poetry.group.format.dependencies]
black = "^24.3.0"
isort = "^5.13.2"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
boto3 = "^1.34.82"
black = "^24.3.0"
isort = "^5.13.2"
flake8 = "^7.0.0"
flake8-docstrings = "^1.7.0"
flake8-copyright = "^0.2.4"
flake8-builtins = "^2.5.0"
pyproject-flake8 = "^7.0.0"
pep8-naming = "^0.13.3"
codespell = "^2.2.6"
shellcheck-py = "^0.10.0.1"

[tool.poetry.group.unit.dependencies]
pytest = "^8.1.1"
pytest-asyncio = "*"
coverage = {extras = ["toml"], version = "^7.4.4"}
parameterized = "^0.9.0"

[tool.poetry.group.integration.dependencies]
pytest = "^8.1.1"
pytest-github-secrets = {git = "https://github.com/canonical/data-platform-workflows", tag = "v13.1.0", subdirectory = "python/pytest_plugins/github_secrets"}
pytest-operator = "^0.34.0"
pytest-operator-cache = {git = "https://github.com/canonical/data-platform-workflows", tag = "v13.1.0", subdirectory = "python/pytest_plugins/pytest_operator_cache"}
pytest-operator-groups = {git = "https://github.com/canonical/data-platform-workflows", tag = "v13.1.0", subdirectory = "python/pytest_plugins/pytest_operator_groups"}
pytest-microceph = {git = "https://github.com/canonical/data-platform-workflows", tag = "v13.1.0", subdirectory = "python/pytest_plugins/microceph"}
juju = "^3.2.2"
ops = "^2.12.0"
tenacity = "^8.2.3"
pyyaml = "^6.0.1"
urllib3 = "^2.2.1"
protobuf = "5.26.1"


# Testing tools configuration
[tool.coverage.run]
branch = true

[tool.coverage.report]
show_missing = true

# Formatting tools configuration
[tool.black]
line-length = 99
target-version = ["py38"]

[tool.isort]
profile = "black"

# Linting tools configuration
[tool.flake8]
max-line-length = 99
max-doc-length = 99
max-complexity = 13
exclude = [".git", "__pycache__", ".tox", "build", "dist", "*.egg_info", "venv"]
select = ["E", "W", "F", "C", "N", "R", "D", "H"]
# Ignore W503, E501 because using black creates errors with this
# Ignore D107 Missing docstring in __init__
ignore = ["W503", "E501", "D107", "D412"]
# D100, D101, D102, D103: Ignore missing docstrings in tests
per-file-ignores = ["tests/*:D100,D101,D102,D103,D104"]
docstring-convention = "google"
# Check for properly formatted copyright header in each file
copyright-check = "True"
copyright-author = "Canonical Ltd."
copyright-regexp = "Copyright\\s\\d{4}([-,]\\d{4})*\\s+%(author)s"

[tool.pytest.ini_options]
minversion = "6.0"
log_cli_level = "INFO"
markers = ["unstable"]
asyncio_mode = "auto"