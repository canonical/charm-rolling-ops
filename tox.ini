# Copyright 2021 Canonical Ltd.
# See LICENSE file for licensing details.
[tox]
skipsdist = True
skip_missing_interpreters = True
envlist = lint, unit

[vars]
src_dir = {toxinidir}/src/
tst_dir = {toxinidir}/tests/
itst_dir = {toxinidir}/tests/integration
lib_dir = {toxinidir}/lib/charms/rolling_ops
all_dir = {[vars]src_dir} {[vars]tst_dir} {[vars]lib_dir}
lxd_name = charm-rolling-ops-test

[testenv]
set_env =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_dir}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
pass_env =
  PYTHONPATH
  HOME
  PATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS
  HTTP_PROXY
  HTTPS_PROXY
  NO_PROXY

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    isort
commands =
    isort {[vars]all_dir}
    black {[vars]all_dir}

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    flake8
    flake8-docstrings
    flake8-copyright
    flake8-builtins
    mypy
    pyproject-flake8
    pep8-naming
    isort
commands =
    # pflake8 wrapper suppports config from pyproject.toml
    pflake8 {[vars]all_dir}
    isort --check-only --diff {[vars]all_dir}
    black --check --diff {[vars]all_dir}

[testenv:unit]
description = Run unit tests
deps =
    pytest
    coverage[toml]
    -r{toxinidir}/requirements.txt
    pyfakefs==4.4.0
commands =
    coverage run --source={[vars]lib_dir} \
        -m pytest --ignore={[vars]tst_dir}integration -v --tb native {posargs}
    coverage report

[testenv:integration]
description = Run integration tests
set_env =
    {[testenv]set_env}
    # Workaround for https://github.com/python-poetry/poetry/issues/6958
    POETRY_INSTALLER_PARALLEL = false
pass_env =
    CI
    GITHUB_OUTPUT
allowlist_externals = 
    charmcraft
deps =
     juju
     pytest
     pytest-operator
     -r{toxinidir}/requirements.txt
commands_pre =
    poetry install --only integration
commands =
    pytest {[vars]itst_dir} -vv --no-header --tb native --log-cli-level=INFO -s {posargs}
